{"name": "test_printCarNamesandPrices[chrome-BMW-BMWs Cars]", "status": "failed", "statusDetails": {"message": "AssertionError: Not on the correct page as title is not matching\nassert 'BMW Cars' == 'BMWs Cars'\n  - BMWs Cars\n  ?    -\n  + BMW Cars", "trace": "self = <Testcases.test_Carwale.Test_Carwale object at 0x7fd7c54cba60>, carBrand = 'BMW', carTitle = 'BMWs Cars'\n\n    @pytest.mark.parametrize(\"carBrand, carTitle\",\n                             DataProvider.get_data(\"NewCarsTest\"))\n    def test_printCarNamesandPrices(self, carBrand,carTitle):\n        log.logger.info(\"******Inside Car Names*********\")\n        home = HomePage(self.driver)\n        car = CarBase(self.driver)\n        print(\"Printing car brand:\", carBrand)\n    \n        if carBrand == \"BMW\":\n            home.gotoNewCars().selectBMW()\n            title = car.getCarTitle()  # To get Car Title\n            print(\"Car title is: \"+title)\n>           assert title == carTitle, \"Not on the correct page as title is not matching\"\nE           AssertionError: Not on the correct page as title is not matching\nE           assert 'BMW Cars' == 'BMWs Cars'\nE             - BMWs Cars\nE             ?    -\nE             + BMW Cars\n\ntest_Carwale.py:74: AssertionError"}, "attachments": [{"name": "log", "source": "ceb5ea81-5a79-4419-b4a5-812357329d86-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "869bf443-57d1-46fb-9e51-fdeee26ba6cc-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "29ff37bc-ee95-4c6b-8f31-da8763e01501-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "get_browser", "value": "'chrome'"}, {"name": "carBrand", "value": "'BMW'"}, {"name": "carTitle", "value": "'BMWs Cars'"}], "start": 1641368326497, "stop": 1641368333337, "uuid": "7b892450-7994-41e5-8f70-09bf0878e3ac", "historyId": "97d03009223335b47956de2fbe6c8979", "testCaseId": "13cc11e909433098b45892dc3b1d7cc6", "fullName": "test_Carwale.Test_Carwale#test_printCarNamesandPrices", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('log_on_failure', 'get_browser')"}, {"name": "suite", "value": "test_Carwale"}, {"name": "subSuite", "value": "Test_Carwale"}, {"name": "host", "value": "LiriQA1.local"}, {"name": "thread", "value": "14142-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Carwale"}]}